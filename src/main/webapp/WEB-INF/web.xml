<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4"
         xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

  <!-- 加载spring容器 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath*:spring/applicationContext-*.xml</param-value>
  </context-param>

  <!-- springmvc前端控制器 -->
  <servlet>
    <servlet-name>springmvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!-- contextConfigLocation配置springmvc加载的配置文件（配置处理器映射器、适配器等等） 如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称-serlvet.xml（springmvc-servlet.xml） -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath*:spring/springmvc.xml</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <!-- 第一种：*.action，访问以.action结尾 由DispatcherServlet进行解析
         第二种：/，所以访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析
                 使用此种方式可以实现 RESTful风格的url
        第三种：/*，这样配置不对，使用这种配置，最终要转发到一个jsp页面时， 仍然会由DispatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错。 -->
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <!-- 配置logback -->
  <context-param>
    <param-name>logbackConfigLocation</param-name>
    <param-value>classpath*:/logback.xml</param-value>
  </context-param>
  <!-- post乱码过虑器 -->
  <filter>
    <filter-name>CharacterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>utf-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--配置错误页面-->
  <error-page>	<!--将错误代码(Error Code)或异常(Exception)的种类对应到web应用资源路径.-->
    <error-code>404</error-code>		<!--HTTP Error code,例如: 404、403-->
    <location>/WEB-INF/404.jsp</location>		<!--用来设置发生错误或异常时要显示的页面-->
  </error-page>
  <error-page>
    <error-code>500</error-code>
    <location>/WEB-INF/500.jsp</location>
  </error-page>

  <error-page>
    <exception-type>java.lang.Exception</exception-type><!--设置可能会发生的java异常类型,例如:java.lang.Exception-->
    <location>/ExceptionError.html</location>			<!--用来设置发生错误或异常时要显示的页面-->
  </error-page>

  <!--回话超时 单位分钟 -->
  <session-config>
    <session-timeout>60</session-timeout>
  </session-config>

  <!--:spring监听器-->
  <listener>  <!--用来设定Listener接口-->
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <listener>
    <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
  </listener>

  <!-- 登录拦截-->
<!--  <filter>-->
<!--    <filter-name>loginfilter</filter-name>-->
<!--    <filter-class>com.baibaoxiang.filter.CheckLoginFilter</filter-class>-->
<!--    <init-param>-->
<!--      <param-name>ignoreCheckURI</param-name>-->
<!--      <param-value>png,jpg,js,css,svg,map</param-value>-->
<!--    </init-param>-->
<!--  </filter>-->
<!--  <filter-mapping>-->
<!--    <filter-name>loginfilter</filter-name>-->
<!--    <url-pattern>/backstage</url-pattern>-->
<!--  </filter-mapping>-->
<!--  <welcome-file-list>-->
<!--    <welcome-file>index.html</welcome-file>-->
<!--    <welcome-file>index.jsp</welcome-file>-->
<!--    <welcome-file>default.html</welcome-file>-->
<!--    <welcome-file>default.htm</welcome-file>-->
<!--    <welcome-file>default.jsp</welcome-file>-->
<!--  </welcome-file-list>-->
</web-app>
        